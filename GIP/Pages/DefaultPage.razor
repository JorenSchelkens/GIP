@page "/default"
@inject IMatToaster Toaster
@inject IJSRuntime JS
@inject PresentationService PresentationService

@if (showDeel0)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    Upload alle Excels in volgende volgorde: 
                    <br />
                    @((MarkupString)EHBFunctions.GetFileOrderString())
                </p>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatFileUpload OnChange="@MultipleFilesReady" AllowMultiple="true" Label="Upload alle bestanden"></MatFileUpload>
            </div>

        </div>
    </div>
}

@if (showDeel1)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatNumericUpDownField Label="Aantal PowerPoints Te Genereren"
                                       Minimum=1
                                       Style="min-width: 500px;"
                                       @bind-Value="@aantalPowerPoints"
                                       @onfocusout="CheckNumber">
                </MatNumericUpDownField>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatButton Class="knop" OnClick="@Volgende1" Raised="true">Volgende</MatButton>
            </div>

        </div>
    </div>
}

@if (showDeel2)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatSelectItem Label="Opleiding" @bind-Value="@opleiding" Items="@opleidingen"></MatSelectItem>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <span><b>Geselecteerde Opleidingen:</b></span>

                <br />
                <br />

                @if (geselecteerdeOpleidingen.Count == 0)
                {
                    <span>/</span>
                }
                else
                {
                    @foreach (string temp in geselecteerdeOpleidingen)
                    {
                        <span>@temp</span>
                        <br />
                    }
                }

                <br />

            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatButton Class="knop" OnClick="@Volgende2" Raised="true">Toevoegen</MatButton>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                <MatButton Class="knop" OnClick="@Reset" Raised="true">Reset</MatButton>
            </div>

        </div>
    </div>
}

@if (showDeel3)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <h3>Genereren...</h3>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatButton Class="knop" OnClick="@Reset" Raised="true">Reset</MatButton>
            </div>

        </div>
    </div>
}

@if (showDeel4)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                @if (aantalPowerPoints > 1)
                {
                    <h3>De PowerPoints worden gedownload...</h3>
                }
                else
                {
                    <h3>De PowerPoint wordt gedownload...</h3>
                }

            </div>

            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <MatButton Class="knop" OnClick="@Reset" Raised="true">Nieuwe Download(s)</MatButton>
            </div>

        </div>
    </div>
}

@code {

    private bool showDeel0;
    private bool showDeel1;
    private bool showDeel2;
    private bool showDeel3;
    private bool showDeel4;

    private int aantalPowerPoints;
    private int aantal;
    private int delay = 50;

    private string opleiding;
    private List<string> geselecteerdeOpleidingen;
    private List<MemoryStream> allExcels;

    MemoryStream documentStream;

    string[] opleidingen = new[]
    {
        "Bachelor in de Biomedische Laboratoriumtechnologie",
        "Bachelor in de Landschaps- en Tuinarchitectuur",
        "Bachelor in de Landschaps- en Tuinarchitectuur - Werktraject",
        "Bachelor in de Pediatrie en Neonatologie",
        "Bachelor in de Verpleegkunde 180sp",
        "Bachelor in de Verpleegkunde 240sp",
        "Bachelor in de Voedings- en Dieetkunde",
        "Bachelor in de Vroedkunde",
        "Bachelor in het Zorgmanagement",
        "Nascholing Bio-informatica",
        "Nascholing cosmetische wetenschappen",
        "Nascholing Kansarmoede en zwangerschap in Brussel",
        "Nascholing Kwaliteitsvolle postnatale zorgverlening na vervroegd ontslag uit het ziekenhuis",
        "Nascholing mentorenopleiding verpleegkunde",
        "Nascholing Point of Care Testen",
        "Nascholing Sportvoedingsadvies op maat geven – sportdiëtetiek",
        "Nascholing Voedingsbeleid in de geriaterische instelling",
        "Nascholing Workshops Open Biolabo Brussel",
        "Nascholing Ziekenhuisfarmacie",
        "Postgraduaat Diabeteseducator",
        "Postgraduaat Forensisch Onderzoek",
        "Postgraduate International forensic science and policing",
    };

    protected override void OnInitialized()
    {
        allExcels = new List<MemoryStream>();

        Reset();
        this.StateHasChanged();
    }

    public void Reset()
    {
        this.showDeel0 = true;
        this.showDeel1 = false;
        this.showDeel2 = false;
        this.showDeel3 = false;
        this.showDeel4 = false;

        aantalPowerPoints = 1;
        aantal = 0;

        opleiding = "";
        geselecteerdeOpleidingen = new List<string>();
    }

    public void CheckNumber()
    {
        if (aantalPowerPoints < 1)
        {
            aantalPowerPoints = 1;
            this.StateHasChanged();
        }
    }

    public async void MultipleFilesReady(IMatFileUploadEntry[] files)
    {
        MemoryStream temp;

        if (files.Length == 16)
        {
            foreach (var file in files)
            {
                Console.WriteLine(file.Name);

                temp = new MemoryStream();
                await file.WriteToStreamAsync(temp);

                this.allExcels.Add(temp);
            }

            this.Volgende0();
        }
    }

    public async void Volgende0()
    {
        await Task.Delay(delay);

        this.showDeel0 = false;
        this.showDeel1 = true;

        this.StateHasChanged();
    }

    public void Volgende1()
    {
        if (aantalPowerPoints >= 1)
        {
            aantal = 0;

            this.showDeel1 = false;
            this.showDeel2 = true;
        }
    }

    public async void Volgende2()
    {
        if (!string.IsNullOrWhiteSpace(opleiding))
        {
            geselecteerdeOpleidingen.Add(opleiding);
            opleiding = "";
            aantal++;

            Toaster.Add("Opleiding toegevoegd", MatToastType.Success, "Succes");

            this.StateHasChanged();
        }

        if (aantal == aantalPowerPoints)
        {
            await Task.Delay(delay);

            this.showDeel2 = false;
            this.showDeel3 = true;

            this.StateHasChanged();

            BerekenAlles();
        }
    }

    public async void BerekenAlles()
    {
        foreach (string richting in geselecteerdeOpleidingen)
        {
            documentStream = PresentationService.CreatePowerPoint(richting, allExcels);
            await JS.SaveAs($"Cijferanalyse {richting} - {DateTime.Now.ToString()}.pptx", documentStream.ToArray());
        }

        await Task.Delay(delay);
        this.showDeel3 = false;
        this.showDeel4 = true;

        this.StateHasChanged();
    }
}